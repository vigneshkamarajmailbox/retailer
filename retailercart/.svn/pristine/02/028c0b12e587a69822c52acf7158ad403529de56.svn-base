import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';
import { UserRepository } from './users.repository';
import { SignupDto } from 'src/users/dto/signup.dto';
import * as crypto from 'crypto';

@Injectable()
export class UsersService {
  @Inject()
  userRepository: UserRepository;

  async findOne(username) {
    return this.userRepository.findOne(username);
  }
  async findAllByUserCompanyMap(username: string) {
    return this.userRepository.findAllByUserCompanyMap(username);
  }
  
  async findCmpName(cmpCode: string) {
    return await this.userRepository.findCmpName(cmpCode);   
  }

  async findAllUsers(): Promise<any> {
    return await this.userRepository.findAll();
  }

  async findByMobile(mobile: number): Promise<any> {
    return await this.userRepository.findByMobileNo(mobile);
  }

  // Created by Aravind Reddy (EmpId : 1365)

  async create(signupDto: SignupDto) {
    const find = await this.userRepository.findByMobileNo(signupDto.mobileNo);
    if (find) {
      throw new HttpException('User Already Exist/Registered', HttpStatus.BAD_REQUEST);
    }

    signupDto.password = this.hashPassword(signupDto.userName, signupDto.password);

    await this.userRepository.create(signupDto);

    return signupDto;
  }

  async validateUser(username, pass): Promise<any> {
    const hashedPassword = this.hashPassword(username, pass);
    return await this.userRepository.validateUser(username, hashedPassword);
  }

  async validateUserotp(mobile, otp): Promise<any> {
    return await this.userRepository.validateOTP(mobile, otp);
  }

  async sendOTP(mobile: number): Promise<any> {
    return await this.userRepository.sendOTP(mobile);
  }

  private hashPassword(username: string, password: string): string {
    return crypto
      .createHash('md5')
      .update(username + password)
      .digest('hex');
  }
}
