import { HttpStatus, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CreateScreenDto } from './dto/create-screen.dto';
import { UpdateScreenDto } from './dto/update-screen.dto';
import { ScreenAccess } from './entities/screen-access.entity';
import { Screen } from './entities/screen.entity';

@Injectable()
export class ScreenService {

  constructor(
    @InjectRepository(Screen)
    private screenRepository : Repository<Screen>,

    @InjectRepository(ScreenAccess)
    private screenAccessRepository : Repository<ScreenAccess>
  ){}
  create(createScreenDto: CreateScreenDto) {
    return 'This action adds a new screen';
  }

  async findAll(): Promise<any> {
    let screenDate = await this.screenRepository.find({select:{moduleNo:true,moduleName:true,screenNo:true,screenName:true,screenType:true,sequence:true}});
    return {
      statusCode : HttpStatus.OK,
      screens : screenDate
    }
  }

  async findAllAccess(moduleNo:number, screenNo:number) {
     let screenAcess = await this.screenAccessRepository.find({where:{moduleNo:moduleNo,screenNo:screenNo}});
     return {
      statusCode : HttpStatus.OK,
      screenAccess : screenAcess
    }
  }

  findOne(moduleNo: number) {
    return 'This action perform findone';
  }

  update(id: number, updateScreenDto: UpdateScreenDto) {
    return `This action updates a #${id} screen`;
  }

  remove(id: number) {
    return `This action removes a #${id} screen`;
  }
}
