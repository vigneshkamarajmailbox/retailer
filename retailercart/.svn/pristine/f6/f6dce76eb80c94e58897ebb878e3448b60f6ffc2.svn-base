import { HttpStatus, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { CreateLocationDto } from './dto/create-location.dto';
import { UpdateLocationDto } from './dto/update-location.dto';
import { City } from './entities/city.entity';
import { Country } from './entities/country.entity';
import { Location } from './entities/location.entity';
import { State } from './entities/state.entity';

@Injectable()
export class LocationService {
  constructor(
    @InjectRepository(Location)
    private locationRepository : Repository<Location>,
    @InjectRepository(Country)
    private countryRepository : Repository<Country>,
    @InjectRepository(State)
    private stateRepository : Repository<State>,
    @InjectRepository(City)
    private cityRepository : Repository<City>,
  ){}
  create(createLocationDto: CreateLocationDto) {
    return 'This action adds a new location';
  }

  async findAll() {
    let location = await this.locationRepository.find();
    return {
      statusCode : HttpStatus.OK,
      location : location
    }
  }

  async findAllCountry(){
    let countryList = await this.countryRepository.find();
    console.log('test', countryList);
    return {
      statusCode : HttpStatus.OK,
      country:countryList
    }
  }

  async findAllState(countryCode:string){
    let stateList = await this.stateRepository.find({where:{countryCode:countryCode}});
    return {
      statusCode : HttpStatus.OK,
      state:stateList
    }
  }

  async findAllCity(stateCode:string){
    let cityList = await this.cityRepository.find({where:{stateCode:stateCode}});
    return {
      statusCode : HttpStatus.OK,
      city:cityList
    }
  }

  async fetchLocationByCountry(data){
    return await this.locationRepository.find({where:{countryCode: In([data.countryCode])}});
  }

  findOne(id: number) {
    return `This action returns a #${id} location`;
  }

  update(id: number, updateLocationDto: UpdateLocationDto) {
    return `This action updates a #${id} location`;
  }

  remove(id: number) {
    return `This action removes a #${id} location`;
  }
}
