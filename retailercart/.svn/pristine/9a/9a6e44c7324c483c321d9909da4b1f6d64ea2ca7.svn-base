# suppress inspection "UnusedProperty" for whole file
logging.file.name=logs/appusage.log
logging.level.com.botree=info
spring.datasource.url=jdbc:mysql://localhost:3306/retailer_ssfa?useSSL=false&requireSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Connection Pool Properties(HiKari)
# This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection
# from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
# Lowest acceptable connection timeout is 250 ms.
# Default: 30000 (30 seconds)
spring.datasource.hikari.connection-timeout=60000
# This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
# Basically this value will determine the maximum number of actual connections to the database backend. A reasonable
# value for this is best determined by your execution environment. When the pool reaches this size, and no idle
# connections are available, calls to getConnection() will block for up to connectionTimeout milliseconds before timing out.
# Default: 10
spring.datasource.hikari.maximum-pool-size=5
# This property controls the maximum amount of time that a connection is allowed to sit idle in the pool.
# This setting only applies when minimumIdle is defined to be less than maximumPoolSize. Idle connections will
# not be retired once the pool reaches minimumIdle connections. Whether a connection is retired as idle or not is subject
# to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle
# before this timeout. A value of 0 means that idle connections are never removed from the pool. The minimum allowed
# value is 10000ms (10 seconds).
# Default: 600000 (10 minutes)
spring.datasource.hikari.idle-timeout=300000
# This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired,
# only when it is closed will it then be removed. On a connection-by-connection basis, minor negative attenuation is
# applied to avoid mass-extinction in the pool. It should be several minutes shorter than any database or infrastructure
# imposed connection time limit. A value of 0 indicates no maximum lifetime (infinite lifetime),
# subject of course to the idleTimeout setting.
# Default: 1800000 (30 minutes)
spring.datasource.hikari.max-lifetime=600000
# This property sets a SQL statement that will be executed after every new connection creation before adding it to the
# pool. If this SQL is not valid or throws an exception, it will be treated as a connection failure and the standard
# retry logic will be followed.
# Default: none
spring.datasource.hikari.connection-init-sql=SELECT 1
# Recommended settings for MySQL DB
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.dataSource.hikari.data-source-properties.prepStmtCacheSize=250
spring.dataSource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.dataSource.hikari.data-source-properties.useServerPrepStmts=true
# QUERY
query.location=config/queries
# URL
log.exporter.url=http://localhost:8002/logger
# LOGGER EXPORTER
cron.log.exporter=0 0/2 * * * *
cron.log.exporter.flag=false
# APPLICATION NAME
app.name=RETAILER-SSFA-UAT
# DASHBOARD PROCESS
company.code=TGBL
